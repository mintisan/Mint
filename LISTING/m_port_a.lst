


ARM Macro Assembler    Page 1 


    1 00000000         ;/*********************** (C) COPYRIGHT 2010 Libraworks 
                       *************************
    2 00000000         ;* File Name : m_cpu_a.asm 
    3 00000000         ;* Author  : Librae 
    4 00000000         ;* Version  : V1.0
    5 00000000         ;* Date   : 06/10/2010
    6 00000000         ;* Description : ¦ÌCOS-II asm port
    7 00000000         ;*******************************************************
                       ************************/
    8 00000000         ;ÉêÃ÷ÕâÐ©±äÁ¿ÊÇÔÚÆäËûÎÄ¼þ¶¨ÒåµÄ£¬±¾ÎÄ¼þÖ»×öÒýÓÃ
    9 00000000                 IMPORT           m_cur_prio
   10 00000000                 IMPORT           m_high_prio
   11 00000000                 IMPORT           m_cur_tcb
   12 00000000                 IMPORT           m_high_tcb
   13 00000000         
   14 00000000         ;ÉêÃ÷ÕâÐ©º¯ÊýÊÇÔÚ±¾ÎÄ¼þÖÐ¶¨ÒåµÄ£¬¸øÍâ²¿ÒýÓÃµÄ¡£         
                               
   15 00000000                 EXPORT           PendSV_Handler
   16 00000000                 EXPORT           m_start_high
   17 00000000         
   18 00000000         
   19 00000000         ;¶¨Òå¼¸¸ö³£Á¿£¬ÀàËÆCÓïÑÔÖÐµÄ#defineÔ¤´¦ÀíÖ¸Áî¡£     
   20 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; ÖÐ¶Ï¿ØÖÆ¼Ä´æÆ÷
   21 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; PendSVÓÅÏÈ¼¶¼Ä´æÆ
                                                            ÷µÄµØÖ·
   22 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0x000000FF  ; PendSVÖÐ¶ÏµÄÓÅÏÈ¼
                                                            ¶Îª255£¨×îµÍ£©
   23 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; ´¥·¢Èí¼þÖÐ¶ÏµÄÖµ£
                                                            ¬Î»28Îª1.
   24 00000000         
   25 00000000                 PRESERVE8
   26 00000000         
   27 00000000                 AREA             |.text|, CODE, READONLY
   28 00000000                 THUMB
   29 00000000         
   30 00000000         ;*******************************************************
                       *************************************************
   31 00000000         ;                                         START MULTITAS
                       KING
   32 00000000         ;                                      void OSStartHighR
                       dy(void)
   33 00000000         ;
   34 00000000         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
   35 00000000         ;              the first task to start.
   36 00000000         ;
   37 00000000         ;           2) OSStartHighRdy() MUST:
   38 00000000         ;              a) Setup PendSV exception priority to low
                       est;
   39 00000000         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;



ARM Macro Assembler    Page 2 


   40 00000000         ;              c) Set the main stack to OSRunning
   41 00000000         ;              d) Trigger PendSV exception;
   42 00000000         ;              e) Enable interrupts (tasks will run with
                        interrupts enabled).
   43 00000000         ;*******************************************************
                       *************************************************
   44 00000000         m_start_high
   45 00000000         ;ÉèÖÃPendSVÖÐ¶ÏµÄÓÅÏÈ¼¶
   46 00000000 4C14            LDR              R4, =NVIC_SYSPRI14 ; set the Pe
                                                            ndSV exception prio
                                                            rity
   47 00000002 F04F 05FF       LDR              R5, =NVIC_PENDSV_PRI
   48 00000006 6025            STR              R5, [R4]
   49 00000008         ;ÉèÖÃPSPÎª0
   50 00000008 F04F 0400       MOV              R4, #0      ; set the PSP to 0 
                                                            for initial context
                                                             switch call
   51 0000000C F384 8809       MSR              PSP, R4
   52 00000010         
   53 00000010         ;´¥·¢PendSVÖÐ¶Ï
   54 00000010 4C11            LDR              R4, =NVIC_INT_CTRL ;rigger the 
                                                            PendSV exception (c
                                                            auses context switc
                                                            h)
   55 00000012 F04F 5580       LDR              R5, =NVIC_PENDSVSET
   56 00000016 6025            STR              R5, [R4]
   57 00000018         
   58 00000018 B662            CPSIE            I           ;enable interrupts 
                                                            at processor level
   59 0000001A         ;ËÀÑ­»·£¬Ó¦¸Ã²»»áµ½ÕâÀï
   60 0000001A         OSStartHang
   61 0000001A E7FE            B                OSStartHang ;should never get h
                                                            ere
   62 0000001C         
   63 0000001C         ;*******************************************************
                       *************************************************
   64 0000001C         ;                                       HANDLE PendSV EX
                       CEPTION
   65 0000001C         ;                                   void PendSV_Handler(
                       void)
   66 0000001C         ;
   67 0000001C         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
   68 0000001C         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
   69 0000001C         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
   70 0000001C         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
   71 0000001C         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
   72 0000001C         ;              a thread or occurs due to an interrupt or
                        exception.
   73 0000001C         ;
   74 0000001C         ;           2) Pseudo-code is:
   75 0000001C         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
   76 0000001C         ;              b) Save remaining regs r4-r11 on process 
                       stack;



ARM Macro Assembler    Page 3 


   77 0000001C         ;              c) Save the process SP in its TCB, OSTCBC
                       urPtr->OSTCBStkPtr = SP;
   78 0000001C         ;              d) Call OSTaskSwHook();
   79 0000001C         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
   80 0000001C         ;              f) Get current ready thread TCB, OSTCBCur
                       Ptr = OSTCBHighRdyPtr;
   81 0000001C         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdyPtr->OSTCBStkPtr;
   82 0000001C         ;              h) Restore R4-R11 from new process stack;
                       
   83 0000001C         ;              i) Perform exception return which will re
                       store remaining context.
   84 0000001C         ;
   85 0000001C         ;           3) On entry into PendSV handler:
   86 0000001C         ;              a) The following have been saved on the p
                       rocess stack (by processor):
   87 0000001C         ;                 xPSR, PC, LR, R12, R0-R3
   88 0000001C         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
   89 0000001C         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
   90 0000001C         ;              d) OSTCBCurPtr      points to the OS_TCB 
                       of the task to suspend
   91 0000001C         ;                 OSTCBHighRdyPtr  points to the OS_TCB 
                       of the task to resume
   92 0000001C         ;
   93 0000001C         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
   94 0000001C         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
   95 0000001C         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
   96 0000001C         ;*******************************************************
                       *************************************************
   97 0000001C         PendSV_Handler
   98 0000001C         ;xPSR, PC, LR, R12, R0-R3ÒÑ×Ô¶¯±£´æ
   99 0000001C B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  100 0000001E F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer Èç¹ûÔÚÓ
                                                            ÃPSP¶ÑÕ»,Ôò¿ÉÒÔºöÂÔ
                                                            ±£´æ¼Ä´æÆ÷,²Î¿¼CM3È
                                                            ¨ÍþÖÐµÄË«¶ÑÕ»-°×²Ë×
                                                            ¢
  101 00000022 B128            CBZ              R0, PendSV_Handler_Nosave ; Ski
                                                            p register save the
                                                             first time
  102 00000024         
  103 00000024 3820            SUBS             R0, R0, #0x20 ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  104 00000026 E880 0FF0       STM              R0, {R4-R11}
  105 0000002A         
  106 0000002A 490C            LDR              R1, =m_cur_tcb ; OSTCBCur->OSTC
                                                            BStkPtr = SP;
  107 0000002C 6809            LDR              R1, [R1]
  108 0000002E 6008            STR              R0, [R1]    ; R0 is SP of proce



ARM Macro Assembler    Page 4 


                                                            ss being switched o
                                                            ut
  109 00000030         
  110 00000030         ; At this point, entire context of process has been save
                       d
  111 00000030         PendSV_Handler_Nosave
  112 00000030 480B            LDR              R0, =m_cur_prio ; OSPrioCur = O
                                                            SPrioHighRdy;
  113 00000032 490C            LDR              R1, =m_high_prio
  114 00000034 780A            LDRB             R2, [R1]
  115 00000036 7002            STRB             R2, [R0]
  116 00000038         
  117 00000038 4808            LDR              R0, =m_cur_tcb ; OSTCBCur  = OS
                                                            TCBHighRdy;
  118 0000003A 490B            LDR              R1, =m_high_tcb
  119 0000003C 680A            LDR              R2, [R1]
  120 0000003E 6002            STR              R2, [R0]
  121 00000040         
  122 00000040 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  123 00000042 E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  124 00000046 3020            ADDS             R0, R0, #0x20
  125 00000048 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  126 0000004C F04E 0E04       ORR              LR, LR, #0x04 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  127 00000050 B662            CPSIE            I
  128 00000052 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  129 00000054         
  130 00000054                 ALIGN
  131 00000054         
  132 00000054                 END
              E000ED22 
              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=..\outpu
t\m_port_a.d -o..\output\m_port_a.o -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\
PACK\ARM\CMSIS\3.20.4\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F10x --predefi
ne="__EVAL SETA 1" --list=..\listing\m_port_a.lst ..\MintOS\m_port_a.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 27 in file ..\MintOS\m_port_a.s
   Uses
      None
Comment: .text unused
OSStartHang 0000001A

Symbol: OSStartHang
   Definitions
      At line 60 in file ..\MintOS\m_port_a.s
   Uses
      At line 61 in file ..\MintOS\m_port_a.s
Comment: OSStartHang used once
PendSV_Handler 0000001C

Symbol: PendSV_Handler
   Definitions
      At line 97 in file ..\MintOS\m_port_a.s
   Uses
      At line 15 in file ..\MintOS\m_port_a.s
Comment: PendSV_Handler used once
PendSV_Handler_Nosave 00000030

Symbol: PendSV_Handler_Nosave
   Definitions
      At line 111 in file ..\MintOS\m_port_a.s
   Uses
      At line 101 in file ..\MintOS\m_port_a.s
Comment: PendSV_Handler_Nosave used once
m_start_high 00000000

Symbol: m_start_high
   Definitions
      At line 44 in file ..\MintOS\m_port_a.s
   Uses
      At line 16 in file ..\MintOS\m_port_a.s
Comment: m_start_high used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 20 in file ..\MintOS\m_port_a.s
   Uses
      At line 54 in file ..\MintOS\m_port_a.s
Comment: NVIC_INT_CTRL used once
NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 23 in file ..\MintOS\m_port_a.s
   Uses
      At line 55 in file ..\MintOS\m_port_a.s
Comment: NVIC_PENDSVSET used once
NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 22 in file ..\MintOS\m_port_a.s
   Uses
      At line 47 in file ..\MintOS\m_port_a.s
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 21 in file ..\MintOS\m_port_a.s
   Uses
      At line 46 in file ..\MintOS\m_port_a.s
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

m_cur_prio 00000000

Symbol: m_cur_prio
   Definitions
      At line 9 in file ..\MintOS\m_port_a.s
   Uses
      At line 112 in file ..\MintOS\m_port_a.s
Comment: m_cur_prio used once
m_cur_tcb 00000000

Symbol: m_cur_tcb
   Definitions
      At line 11 in file ..\MintOS\m_port_a.s
   Uses
      At line 106 in file ..\MintOS\m_port_a.s
      At line 117 in file ..\MintOS\m_port_a.s

m_high_prio 00000000

Symbol: m_high_prio
   Definitions
      At line 10 in file ..\MintOS\m_port_a.s
   Uses
      At line 113 in file ..\MintOS\m_port_a.s
Comment: m_high_prio used once
m_high_tcb 00000000

Symbol: m_high_tcb
   Definitions
      At line 12 in file ..\MintOS\m_port_a.s
   Uses
      At line 118 in file ..\MintOS\m_port_a.s
Comment: m_high_tcb used once
4 symbols
346 symbols in table
